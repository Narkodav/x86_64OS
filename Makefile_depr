# # Makefile for OS Project
# CC = gcc
# CXX = g++
# ASM = nasm
# LD = ld

# # Directories
# KERNEL_DIR = Kernel
# BUILD_DIR = build
# ISO_DIR = isodir/boot

# # Flags
# CFLAGS = -m32 -nostdlib -nostdinc -fno-builtin -fno-stack-protector -nostartfiles -nodefaultlibs -Wall -Wextra -Werror -c -ffreestanding -fno-exceptions -fno-rtti -g
# ASMFLAGS = -f elf32
# LDFLAGS = -m elf_i386 -T linker.ld

# CFLAGSNOWARNING = -m32 -nostdlib -nostdinc -fno-builtin -fno-stack-protector -nostartfiles -nodefaultlibs -Wall -Wextra -c -ffreestanding -fno-exceptions -fno-rtti -g

# # Source files
# C_SOURCES = $(wildcard $(KERNEL_DIR)/*.cpp)
# ASM_SOURCES = $(wildcard $(KERNEL_DIR)/*.asm)

# # Object files
# C_OBJECTS = $(C_SOURCES:$(KERNEL_DIR)/%.cpp=$(BUILD_DIR)/%.o)
# ASM_OBJECTS = $(ASM_SOURCES:$(KERNEL_DIR)/%.asm=$(BUILD_DIR)/%.o)
# OBJECTS = $(C_OBJECTS) $(ASM_OBJECTS)

# # Target
# KERNEL = $(ISO_DIR)/kernel.bin

# .PHONY: all clean run debug iso

# all: iso

# # Main build target
# iso: $(KERNEL) grub.cfg
# 	grub-mkrescue -o my_os.iso isodir

# $(KERNEL): $(OBJECTS) | $(ISO_DIR)
# 	$(LD) $(LDFLAGS) -o $@ $^

# $(BUILD_DIR)/%.o: $(KERNEL_DIR)/%.asm | $(BUILD_DIR)
# 	$(ASM) $(ASMFLAGS) -o $@ $<	

# # Compile C++ files with g++
# $(BUILD_DIR)/%.o: $(KERNEL_DIR)/%.cpp | $(BUILD_DIR)
# 	$(CXX) $(CFLAGSNOWARNING) -o $@ $<

# # Create directories
# $(BUILD_DIR):
# 	mkdir -p $(BUILD_DIR)

# $(ISO_DIR):
# 	mkdir -p $(ISO_DIR)

# # Create GRUB config
# grub.cfg: | $(ISO_DIR)
# 	mkdir -p isodir/boot/grub/
# 	echo 'menuentry "my_os" { multiboot /boot/kernel.bin; boot }' > isodir/boot/grub/grub.cfg

# run: iso
# 	qemu-system-i386 -cdrom my_os.iso
	
# debug: iso
# 	qemu-system-i386 -cdrom my_os.iso -d int,cpu_reset -no-reboot -no-shutdown -monitor stdio -D qemu.log

# #clean:
# # 	rm -rf $(BUILD_DIR) my_os.iso isodir

# # Show build info
# info:
# 	@echo "C++ Sources: $(C_SOURCES)"
# 	@echo "ASM Sources: $(ASM_SOURCES)" 
# 	@echo "Objects: $(OBJECTS)"
# 	@echo "Kernel target: $(KERNEL)"

# Toolchain
CC = gcc
CXX = g++
ASM = nasm
LD = ld
GRUB_MKRESCUE = grub-mkrescue

# Directories
KERNEL_DIR = Kernel
BUILD_DIR = build/Debug
ISODIR = $(BUILD_DIR)/isodir

# Source files
C_SOURCES = $(shell find $(KERNEL_DIR) -name '*.c')
CPP_SOURCES = $(shell find $(KERNEL_DIR) -name '*.cpp')
ASM_SOURCES = $(shell find $(KERNEL_DIR) -name '*.asm')

# Object files
C_OBJS = $(C_SOURCES:$(KERNEL_DIR)/%.c=$(BUILD_DIR)/%.o)
CPP_OBJS = $(CPP_SOURCES:$(KERNEL_DIR)/%.cpp=$(BUILD_DIR)/%.o)
ASM_OBJS = $(ASM_SOURCES:$(KERNEL_DIR)/%.asm=$(BUILD_DIR)/%.o)

OBJS = $(ASM_OBJS) $(C_OBJS) $(CPP_OBJS)

# 32-bit Flags
ASM_FLAGS = -f elf32 -g -F dwarf
CFLAGS = -ffreestanding -fno-stack-protector -fno-pic -m32 -g -O0 \
         -Wall -Wextra -std=gnu99 -I$(KERNEL_DIR)
CXXFLAGS = -ffreestanding -fno-stack-protector -fno-pic -m32 -g -O0 \
           -Wall -Wextra -std=c++17 -fno-exceptions -fno-rtti -I$(KERNEL_DIR)
LDFLAGS = -m elf_i386 -nostdlib

# Output files
KERNEL_ELF = $(BUILD_DIR)/kernel.elf
ISO = $(BUILD_DIR)/myos.iso

# Default target
all: $(ISO)

# Create build directory
$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)
	@mkdir -p $(ISODIR)/boot/grub

# Compile assembly files
$(BUILD_DIR)/%.o: $(KERNEL_DIR)/%.asm | $(BUILD_DIR)
	@mkdir -p $(dir $@)
	$(ASM) $(ASM_FLAGS) $< -o $@

# Compile C files
$(BUILD_DIR)/%.o: $(KERNEL_DIR)/%.c | $(BUILD_DIR)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Compile C++ files
$(BUILD_DIR)/%.o: $(KERNEL_DIR)/%.cpp | $(BUILD_DIR)
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Link kernel
$(KERNEL_ELF): $(OBJS)
	$(LD) $(LDFLAGS) -o $@ $(OBJS) -T linker.ld

# Create GRUB configuration
$(ISODIR)/boot/grub/grub.cfg: | $(BUILD_DIR)
	@echo 'menuentry "My OS" {' > $@
	@echo '    multiboot /boot/kernel.elf' >> $@
	@echo '    boot' >> $@
	@echo '}' >> $@

# Copy kernel to ISO directory
$(ISODIR)/boot/kernel.elf: $(KERNEL_ELF) | $(BUILD_DIR)
	cp $< $@

# Build ISO
$(ISO): $(ISODIR)/boot/kernel.elf $(ISODIR)/boot/grub/grub.cfg
	$(GRUB_MKRESCUE) -o $@ $(ISODIR)

# Run QEMU in debug mode (wait for GDB) - 32-bit
run-debug: $(ISO)
	qemu-system-i386 -cdrom $(ISO) -s -S -no-reboot -no-shutdown

# Run QEMU normally - 32-bit
run: $(ISO)
	qemu-system-i386 -cdrom $(ISO) -no-reboot -no-shutdown

# Start GDB session with 32-bit architecture
gdb: $(KERNEL_ELF)
	gdb -ex "set architecture i386" -ex "target remote localhost:1234" -ex "break kernel_main" $<

# Start GDB with custom commands
gdb-custom: $(KERNEL_ELF)
	gdb -x gdb_commands.txt $<

# Create example gdb commands file for 32-bit
gdb-init:
	@echo "set architecture i386" > gdb_commands.txt
	@echo "target remote localhost:1234" >> gdb_commands.txt
	@echo "break kernel_main" >> gdb_commands.txt
	@echo "continue" >> gdb_commands.txt

# Clean build
clean:
	rm -rf $(BUILD_DIR) gdb_commands.txt

# Debug info
debug-info:
	@echo "C Sources: $(C_SOURCES)"
	@echo "C++ Sources: $(CPP_SOURCES)"
	@echo "ASM Sources: $(ASM_SOURCES)"
	@echo "Objects: $(OBJS)"

.PHONY: all run run-debug gdb gdb-custom gdb-init clean debug-info